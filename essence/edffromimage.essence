language ESSENCE' 1.0

$ Size of group
given n: int

$ Size of the group this group is a subgroup of
given s : int

$ Size of each set
given setsize: int(1..s)

$ Number of sets
given setnum: int(1..s)

$ Occurrences of each value
given dups : int(1..s)

$ Inverse of group
given inverses: matrix indexed by [int(1..n)] of int(1..n)

$ Multiplication table, as table and tuples
given multable: matrix indexed by [int(1..n), int(1..n)] of int(1..n)
given multuples: matrix indexed by [int(1..n*n), int(1..3)] of int(1..n)

$ x*y^-1, as table and tuples
given mulinvtable: matrix indexed by [int(1..n), int(1..n)] of int(1..n)
given mulinvtuples: matrix indexed by [int(1..n*n), int(1..3)] of int(1..n)

$ List of symmetries
$ given symsize: int
$ given syms: matrix indexed by [int(1..symsize),int(1..n)] of int(1..n)

$ The EDF, expressed as a list of lists
find edf: matrix indexed by [int(1..setnum), int(1..setsize)] of int(1..n)
$ A second representation of the EDF, where each set is represented as
$ a boolean array (so [2,3,6] is represented as [F,T,T,F,F,T] for example)
$ find boolrep: matrix indexed by [int(1..setnum), int(1..s)] of bool


$ Extra variables, to represent the values of x*y^-1, for every pairing
find edfmap: matrix indexed by [int(1..setnum), int(1..setsize), int(1..setnum), int(1..setsize)] of int(1..n)

such that

$ Now set up the 'edfmap', this makes a variable 'edfmap[p1,p2,q1,q2]'
$ which is equal to x*y^-1, where x is the p2th element of the p1st set
$ and y is the q2th element of the q1th set
forAll p1 : int(1..setnum). forAll q1 : int(1..setnum).
(
    (    forAll p2 : int(1..setsize). forAll q2 : int(1..setsize).
        table([edf[p1,p2],edf[q1,q2],edfmap[p1,p2,q1,q2]], mulinvtuples)
    )
),


$ Now actually require we have an EDF!
makeSEDF ->
forAll p1 : int(1..setnum).
(
    gcc([edfmap[p1,p2,q1,q2]
    | 
p2 : int(1..setsize),q2 : int(1..setsize), q1 : int(1..setnum), p1 != q1], [i | i : int(2..n)], [toInt(i != 1)*dups | i : int(2..n)])
),

